---------------------------------CONSTRUCCION BASE DE DATOS-------------------------------------------------
CREATE TABLE inventario (
    bd VARCHAR(25),
    codigo   VARCHAR(25),
    stock    INTEGER
);

CREATE TABLE materiales (
    bd VARCHAR(25),
    pro_codigo VARCHAR(25),
    particion  INTEGER DEFAULT 1,
    pq_x_caja  INTEGER DEFAULT 1
);

CREATE TABLE rutas (
    bd VARCHAR(25),
    codigo_ruta INTEGER,  
    dia VARCHAR(10),  
    codigo_cliente VARCHAR(30)
     CONSTRAINT rutas_bd_dia_cliente_unique UNIQUE (bd, dia, codigo_cliente)  
);

CREATE TABLE pedxrutaxprod (
  bd VARCHAR(25),
  ruta         INTEGER           NOT NULL,
  codigo_pro   VARCHAR(25)      NOT NULL,
  producto     VARCHAR(80)      NOT NULL,
  cantidad     INTEGER           NOT NULL,
  pq_por_caja  INTEGER DEFAULT 1 NOT NULL,
  particiones  INTEGER DEFAULT 1 NOT NULL,
  inv          INTEGER DEFAULT 0 NOT NULL,
  pedir        INTEGER GENERATED ALWAYS AS (
    FLOOR((cantidad - inv)::NUMERIC / particiones::NUMERIC)::INTEGER
  ) STORED,
  ped99      INTEGER GENERATED ALWAYS AS (
    (cantidad - inv)
    - (
        FLOOR((cantidad - inv)::NUMERIC / particiones::NUMERIC)::INTEGER
        * particiones
      )
  ) STORED,
  equ_caja     INTEGER GENERATED ALWAYS AS (
    CASE
      WHEN (pq_por_caja::NUMERIC / particiones::NUMERIC) = 0 THEN 0
      ELSE
        FLOOR(
          FLOOR((cantidad - inv)::NUMERIC / particiones::NUMERIC)
          /
          (pq_por_caja::NUMERIC / particiones::NUMERIC)
        )::INTEGER
    END
  ) STORED,
  equ_tira     INTEGER GENERATED ALWAYS AS (
    CASE
      WHEN FLOOR((pq_por_caja::NUMERIC / particiones::NUMERIC))::INTEGER = 0 THEN 0
      ELSE
        FLOOR((cantidad - inv)::NUMERIC / particiones::NUMERIC)::INTEGER
        % FLOOR((pq_por_caja::NUMERIC / particiones::NUMERIC))::INTEGER
    END
  ) STORED
);
CREATE TABLE PEDXCLIXPROD (
  bd VARCHAR(25),
  numero_pedido VARCHAR(70),  
  codigo_cli VARCHAR(30),         
  ruta INTEGER,        
  nombre VARCHAR(80),   
  barrio VARCHAR(40),
  ciudad VARCHAR(30),   
  asesor VARCHAR(20),
  codigo_pro VARCHAR(25),        
  producto VARCHAR(80),   
  cantidad INTEGER,
  valor NUMERIC(14,2),
  tip_pro VARCHAR(2),
  estado VARCHAR(15),
  codigo_pideky TEXT
);

CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) NOT NULL UNIQUE,
  nombre VARCHAR(100),
  documento VARCHAR(20),
  contacto VARCHAR(100),
  password_hash TEXT NOT NULL,
  membership_start DATE NOT NULL DEFAULT CURRENT_DATE,
  membership_end   DATE,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  negocio VARCHAR(80)
);


-----------------------PROCEDIMIENTOS----------------------- 
CREATE OR REPLACE PROCEDURE etl_cargar_pedidos_y_rutas_masivo(
  p_pedidos JSONB,
  p_rutas   JSONB,
  p_dia     TEXT,
  p_bd      TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN  
  DELETE FROM pedxclixprod WHERE bd = p_bd;
  DELETE FROM pedxrutaxprod WHERE bd = p_bd;
  DELETE FROM rutas        WHERE bd = p_bd;
  DELETE FROM materiales   WHERE bd = p_bd;
  DELETE FROM inventario   WHERE bd = p_bd;
  INSERT INTO pedxclixprod (
    bd,
    numero_pedido,
    codigo_cli,
    ruta,
    nombre,
    barrio,
    ciudad,
    asesor,
    codigo_pro,
    producto,
    cantidad,
    valor,
    tip_pro,
    estado,
    codigo_pideky
  )
  SELECT
    p_bd,
    x.numero_pedido,
    split_part(x.cliente, '-', 1),
    NULL,
    x.nombre,
    x.barrio,
    x.ciudad,
    split_part(x.asesor, '-', 1),
    x.codigo_pro,
    x.producto,
    x.cantidad,
    x.valor,
    x.tipo_pro,
    x.estado,
    x.codigo_pideky
  FROM jsonb_to_recordset(p_pedidos) AS x(
    numero_pedido TEXT,
    cliente       TEXT,
    nombre        TEXT,
    barrio        TEXT,
    ciudad        TEXT,
    asesor        TEXT,
    codigo_pro    TEXT,
    producto      TEXT,
    cantidad      INTEGER,
    valor         NUMERIC,
    tipo_pro      TEXT,
    estado        TEXT,
    codigo_pideky TEXT
  )
  WHERE x.tipo_pro   = 'N'
  AND x.estado = 'Sin Descargar' OR x.estado = 'Sin facturar';
  BEGIN
    WITH cte AS (
      SELECT
        p_bd            AS bd,
        (regexp_split_to_array(r.codigo_ruta, '[- ]'))[1]::INTEGER AS codigo_ruta,
        (regexp_split_to_array(r.codigo_ruta, '[- ]'))[2]          AS dia,
        (regexp_split_to_array(r.codigo_cliente, '[- ]'))[1]       AS codigo_cliente
      FROM jsonb_to_recordset(p_rutas) AS r(
        codigo_cliente TEXT,
        codigo_ruta    TEXT
      )
    )
    INSERT INTO rutas (bd, codigo_ruta, dia, codigo_cliente)
    SELECT bd, codigo_ruta, dia, codigo_cliente
    FROM cte
    WHERE dia = p_dia;

  EXCEPTION
    WHEN unique_violation THEN
      RAISE EXCEPTION 'Un cliente no puede estar asignado a dos rutas en el mismo dia';
  END;


  UPDATE pedxclixprod p
  SET ruta = r.codigo_ruta
  FROM rutas r
  WHERE p.codigo_cli   = r.codigo_cliente
    AND r.dia           = p_dia;
END;
$$;
-- VALIDACION DE PRODUCTOS BIG
CREATE OR REPLACE FUNCTION fn_obtener_residuos(
  p_prod_parts JSONB,
  p_empresa TEXT  
) RETURNS JSONB
LANGUAGE sql
AS $$
  SELECT COALESCE(
    jsonb_agg(row_to_json(t)),
    '[]'::jsonb
  )
  FROM (
    SELECT
      p.numero_pedido,
      p.codigo_pro,
      (p.cantidad % pr.particiones) AS residuo
    FROM pedxclixprod p
    JOIN jsonb_to_recordset(p_prod_parts)
      AS pr(codigo_pro INTEGER, particiones INTEGER)
      ON p.codigo_pro = pr.codigo_pro
    WHERE (p.cantidad % pr.particiones) > 0 AND p.bd = p_empresa
  ) AS t;
$$;
---VALIDACION NUMERO DE PEDIDOS Y CLIENTES SIN RUTA
CREATE OR REPLACE FUNCTION fn_obtener_resumen_pedidos(
  p_empresa TEXT
)
RETURNS JSONB
LANGUAGE sql
AS $$
  SELECT COALESCE(
    jsonb_agg(row_to_json(r)),
    '[]'::jsonb
  )
  FROM (
    SELECT
      bd,
      codigo_cli,
      nombre,
      barrio,
      ciudad,
      asesor,
      MAX(codigo_pideky) AS codigo_pideky,
      COUNT(DISTINCT numero_pedido) AS total_pedidos,
      SUM(valor) AS valor,
      ruta
    FROM pedxclixprod
    WHERE bd = p_empresa
    GROUP BY
      barrio,
      codigo_cli,
      bd,
      nombre,
      ciudad,
      asesor,
      ruta
  ) AS r;
$$;
-----PROCEDIMIENTO PARA LA INSERCION DE MATERIALES---------
CREATE OR REPLACE PROCEDURE sp_cargar_materiales(
  p_materiales JSONB,
  p_empresa TEXT
)
LANGUAGE plpgsql
AS $$
DECLARE
  r_materiales INTEGER;
BEGIN
  DELETE FROM materiales WHERE bd = p_empresa;

  INSERT INTO materiales (bd, pro_codigo, particion, pq_x_caja)
  SELECT
    p_empresa,
    m.pro_codigo,
    m.particion,
    m.pq_x_caja
  FROM jsonb_to_recordset(p_materiales) AS m(
    pro_codigo TEXT,
    particion  INTEGER,
    pq_x_caja  INTEGER
  );
  GET DIAGNOSTICS r_materiales = ROW_COUNT;

  IF r_materiales = 0 THEN
    RAISE EXCEPTION 'No se insertaron materiales para la empresa %', p_empresa;
  END IF;
END;
$$;

----PRDOCEDIMIENTO PARA GENERAR EL CONSOLIDADO DE LOS PEDIDOS
CREATE OR REPLACE PROCEDURE sp_etl_pedxrutaxprod_json(
  p_inventario JSONB,
  p_empresa   TEXT,
  p_carro1    INTEGER DEFAULT NULL,
  p_carro2    INTEGER DEFAULT NULL
)
LANGUAGE plpgsql
AS $$
DECLARE
  r_inventario  INTEGER;
  r_inicial     INTEGER;
  r INTEGER;
BEGIN
  DELETE FROM inventario WHERE bd = p_empresa;
  DELETE FROM pedxrutaxprod WHERE bd = p_empresa; 

  -- Insertar inventario
  INSERT INTO inventario (bd, codigo, stock)
  SELECT
    p_empresa,
    i.codigo,
    i.stock
  FROM jsonb_to_recordset(p_inventario) AS i(
    codigo   TEXT,
    producto TEXT,
    stock    INTEGER
  );
  GET DIAGNOSTICS r_inventario = ROW_COUNT;

  -- Insertar consolidado inicial
  INSERT INTO pedxrutaxprod (bd, ruta, codigo_pro, producto, cantidad)
  SELECT
    bd,
    ruta,
    codigo_pro,
    MIN(producto) AS producto,
    SUM(cantidad)
  FROM pedxclixprod
  WHERE ruta IS NOT NULL AND bd = p_empresa
  GROUP BY bd, ruta, codigo_pro;
  GET DIAGNOSTICS r_inicial = ROW_COUNT;

    -- Actualizar particiones
  UPDATE pedxrutaxprod p
  SET
    particiones = m.particion,
    pq_por_caja = m.pq_x_caja
  FROM materiales m
  WHERE p.codigo_pro = m.pro_codigo
    AND m.particion <> 0 AND p.bd = p_empresa AND m.bd = p_empresa;

  -- Ajustar inventario por ruta
  FOR r IN
    SELECT DISTINCT ruta
    FROM pedxrutaxprod
    WHERE bd = p_empresa
      AND (
        (p_carro1 IS NULL AND p_carro2 IS NULL)
        OR ruta = p_carro1 OR ruta = p_carro2
      )
    ORDER BY ruta
  LOOP
    UPDATE pedxrutaxprod p
    SET inv = LEAST(p.cantidad, i.stock)
    FROM inventario i
    WHERE p.codigo_pro = i.codigo
      AND p.ruta = r AND p.bd = p_empresa AND i.bd = p_empresa;

    UPDATE inventario i
    SET stock = i.stock - p2.inv
    FROM pedxrutaxprod p2
    WHERE i.codigo = p2.codigo_pro
      AND p2.ruta = r AND p2.bd = p_empresa AND i.bd = p_empresa;
  END LOOP;

  -- Generar consolidado ruta 99
  INSERT INTO pedxrutaxprod (
    bd,
    ruta,
    codigo_pro,
    producto,
    pq_por_caja,
    particiones,
    cantidad
  )
  SELECT
    bd,
    99 AS ruta,
    codigo_pro,
    producto,
    MAX(pq_por_caja) AS pq_por_caja,
    particiones,
    CEIL(
      SUM(ped99)::NUMERIC / NULLIF(particiones, 0)
    ) * particiones AS cantidad
  FROM pedxrutaxprod
  WHERE ped99 > 0 AND bd = p_empresa
  GROUP BY bd, codigo_pro, producto, particiones;
END;
$$;



  ----OBTENER EL INFORME DE REPARTICION DE INVENTARIO
 CREATE OR REPLACE FUNCTION fn_obtener_reparticion_inventario_json(p_empresa TEXT)
RETURNS JSONB
LANGUAGE sql
AS $$
  SELECT COALESCE(
    jsonb_agg(row_to_json(r)),
    '[]'::jsonb
  )
  FROM (
    SELECT
      bd,
      ruta,
      codigo_pro,
      producto,
      cantidad,
      pedir,
      ped99,
      inv
    FROM pedxrutaxprod
    WHERE inv  > 0 AND bd=p_empresa
    ORDER BY
      ruta ASC,
      producto ASC
  ) AS r;
$$;
---VALIDAR QUE TODOS LOS MATERIALES TENGAN SU PARTICION
CREATE OR REPLACE FUNCTION fn_materiales_sin_definir(p_empresa TEXT)
RETURNS JSONB
LANGUAGE sql
AS $$
  SELECT COALESCE(
    jsonb_agg(row_to_json(t)),
    '[]'::jsonb
  )
  FROM (    
    SELECT DISTINCT
      p.codigo_pro,
      p.producto
    FROM pedxrutaxprod p
    LEFT JOIN materiales m
      ON p.codigo_pro = m.pro_codigo
    WHERE m.pro_codigo IS NULL AND p.bd=p_empresa AND m.bd=p_empresa
  ) AS t;
$$;

  ----OBTENER LA INFO DE TODOS LOS PEDIDOS
  CREATE OR REPLACE FUNCTION fn_obtener_pedidos_con_pedir_json(p_empresa TEXT)
RETURNS JSONB
LANGUAGE sql
AS $$
  SELECT COALESCE(
    jsonb_agg(row_to_json(r)),
    '[]'::jsonb
  )
  FROM (
    SELECT
      ruta,
      codigo_pro,
      producto,
      pedir
    FROM pedxrutaxprod
    WHERE pedir > 0 AND bd=p_empresa
    ORDER BY ruta ASC, producto ASC
  ) AS r;
$$;


INSERT INTO users (
  email,
  nombre,
  documento,
  contacto,
  password_hash,
  membership_start,
  membership_end,
  negocio
) VALUES (
  'facturacion@tiendasymarcas.com',
  'TIENDAS Y MARCAS',
  '900973932-9',
  'contabilidad@tiendasymarcasejecafetero.com',
  crypt('esteban123', gen_salt('bf')),
  '2025-08-01',
  '2026-08-30',
  'carnicos'
);


